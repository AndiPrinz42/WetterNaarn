---
import Layout from "../layouts/Layout.astro";
import DetailSensorWidget from "../components/DetailSensorWidget.astro";
import DetailSensorWidgetBarometer from "../components/DetailSensorWidgetBarometer.astro";
import DetailSensorWidgetWind from "../components/DetailSensorWidgetWind.astro";
import SunWidget from "../components/SunWidget.astro";
import { getMoonIndex, getMoonIcon, getMoonName } from "../scripts/utils.ts";
import { type SensorData, getDummySensorData, type SensorDataGeneric, getDummySensorDataGeneric, getDummySensorDataWind, getDummySensorDataRain } from "../scripts/models/sensors.model";
import * as utils from "../scripts/utils";
import * as unitConverter from "../scripts/unitConverter";
import { Database } from "../scripts/database";
import type { SensorDataWind } from "../scripts/models/sensors.model";
import type { SensorDataRain } from "../scripts/models/sensors.model";
import suncalc from "suncalc3";

const data = await getData();

async function getData(): Promise<SensorData> {
  const db = new Database();
  const sensorData = getDummySensorData();
  sensorData.outTemp = await getGenericCurrentMinMax("outTemp", 1, unitConverter.fahrenheitToCelsius, db);
  sensorData.appTemp = await getGenericCurrentMinMax("appTemp", 1, unitConverter.fahrenheitToCelsius, db);
  sensorData.dewpoint = await getGenericCurrentMinMax("dewpoint", 1, unitConverter.fahrenheitToCelsius, db);
  sensorData.outHumidity = await getGenericCurrentMinMax("outHumidity", 0, undefined, db);
  sensorData.barometer = await getGenericCurrentMinMax("barometer", 1, unitConverter.inHgToHpa, db);
  sensorData.wind = await getWindCurrentMinMax(1, unitConverter.mphToKmh, db);
  sensorData.rain = await getRainData(1, unitConverter.inchToMm, db);

  sensorData.barometerRotation = utils.getBarometerRotation(sensorData.barometer.current);

  const lat = 48.226179739915345;
  const lon = 14.604849316395049;

  sensorData.suntoday = getSunriseSet(lat, lon, 0);
  sensorData.suntomorrow = getSunriseSet(lat, lon, 1);
  const daylength = getDayLength(lat, lon, 0);
  const daylengthyesterday = getDayLength(lat, lon, -1);
  sensorData.daylength = utils.formatDuration(daylength);
  const minutes = Math.floor((daylength - daylengthyesterday) / 1000 / 60);
  if (minutes != 0) {
    sensorData.daylengthdiff = minutes > 0 ? `${minutes}m länger als gestern` : `${minutes * -1}m kürzer als gestern`;
  } else {
    sensorData.daylengthdiff = "Gleich lang wie gestern";
  }

  sensorData.moon.phase = utils.round(suncalc.getMoonIllumination(new Date()).phaseValue * 100);
  sensorData.moon.illumination = utils.round(suncalc.getMoonIllumination(new Date()).fraction * 100);

  const nextNewMoon = new Date(suncalc.getMoonIllumination(new Date()).next.newMoon.value);
  const nextFullMoon = new Date(suncalc.getMoonIllumination(new Date()).next.fullMoon.value);

  sensorData.moon.nextNewMoon = utils.formatDateDDMMYY(nextNewMoon);
  sensorData.moon.nextFullMoon = utils.formatDateDDMMYY(nextFullMoon);
  sensorData.moon.nextNewMoonDays = utils.calcDayDiff(new Date(), nextNewMoon);
  sensorData.moon.nextFullMoonDays = utils.calcDayDiff(new Date(), nextFullMoon);

  const moonindex = getMoonIndex(sensorData.moon.phase);
  sensorData.moon.icon = getMoonIcon(moonindex);
  sensorData.moon.text = getMoonName(moonindex);
  sensorData.moon.nextFullMoonText = utils.futureDatestring(sensorData.moon.nextFullMoonDays);
  sensorData.moon.nextNewMoonText = utils.futureDatestring(sensorData.moon.nextNewMoonDays);

  db.close("weewx");
  db.close("forecast")
  return sensorData;
}

async function getGenericCurrentMinMax(sensor: string, digits: number, convertFn: Function | undefined = undefined, db: Database): Promise<SensorDataGeneric> {
  const data: SensorDataGeneric = getDummySensorDataGeneric();
  let result;
  result = await db.query("weewx", `SELECT ${sensor} FROM archive ORDER BY dateTime DESC LIMIT 1`);
  data.current = result[0][sensor];

  result = await db.query("weewx", `SELECT min, minTime, max, maxTime, sum, count FROM archive_day_${sensor} ORDER BY dateTime DESC LIMIT 1`);
  data.min = result[0].min;
  data.minTime = utils.formatTime(new Date(Number(result[0].minTime) * 1000));
  data.max = result[0].max;
  data.maxTime = utils.formatTime(new Date(Number(result[0].maxTime) * 1000));
  data.avg = result[0].sum / result[0].count;

  if (convertFn) {
    data.current = convertFn(data.current, digits);
    data.min = convertFn(data.min, digits);
    data.max = convertFn(data.max, digits);
    data.avg = convertFn(data.avg, digits);
  } else {
    data.current = utils.round(data.current, digits);
    data.min = utils.round(data.min, digits);
    data.max = utils.round(data.max, digits);
    data.avg = utils.round(data.avg, digits);
  }

  return data;
}

async function getWindCurrentMinMax(digits: number, convertFn: Function | undefined = undefined, db: Database): Promise<SensorDataWind> {
  const data: SensorDataWind = getDummySensorDataWind();
  let result;

  result = await db.query("weewx", "SELECT dateTime, windSpeed FROM archive ORDER BY dateTime DESC LIMIT 1");
  data.current = result[0].windSpeed;
  const dateTime = result[0].dateTime;

  result = await db.query("weewx", `SELECT max, maxTime, sum, count FROM archive_day_windSpeed ORDER BY dateTime DESC LIMIT 1`);
  data.max = result[0].max;
  data.maxTime = result[0].maxTime;
  data.avg = result[0].sum / result[0].count;

  result = await db.query("weewx", `SELECT windDir FROM archive WHERE dateTime = ?`, [dateTime]);
  data.currentDir = result[0].windDir;

  result = await db.query("weewx", `SELECT windDir FROM archive WHERE dateTime = ?`, [data.maxTime]);
  data.maxDir = result[0].windDir;

  result = await db.query("weewx", `SELECT max, maxTime FROM archive_day_windGust ORDER BY dateTime DESC LIMIT 1`);
  data.maxGust = result[0].max;
  data.maxGustTime = result[0].maxTime;

  result = await db.query("weewx", `SELECT windDir FROM archive WHERE dateTime > ? LIMIT 1`, [parseInt(data.maxGustTime) - 300]);

  data.maxTime = utils.formatTime(new Date(Number(data.maxTime) * 1000));
  data.maxGustTime = utils.formatTime(new Date(Number(data.maxGustTime) * 1000));

  if (convertFn) {
    data.current = convertFn(data.current, digits);
    data.max = convertFn(data.max, digits);
    data.avg = convertFn(data.avg, digits);
    data.maxGust = convertFn(data.maxGust, digits);
  } else {
    data.current = utils.round(data.current, digits);
    data.max = utils.round(data.max, digits);
    data.avg = utils.round(data.avg, digits);
    data.maxGust = utils.round(data.maxGust, digits);
  }

  return data;
}

async function getRainData(digits: number, convertFn: Function | undefined = undefined, db: Database): Promise<SensorDataRain> {
  const data: SensorDataRain = getDummySensorDataRain();
  let result;

  result = await db.query("weewx", "SELECT sum FROM archive_day_rain ORDER BY dateTime DESC LIMIT 1");
  data.day = result[0].sum;

  result = await db.query("weewx", "SELECT dateTime FROM archive WHERE rain > 0 ORDER BY dateTime DESC LIMIT 1");
  data.last = result[0].dateTime;

  let from = new Date();
  from.setHours(0, 0, 0, 0);
  from.setDate(from.getDate() - from.getDay() + (from.getDay() === 0 ? -6 : 1));

  let to = new Date();
  to.setHours(23, 59, 59, 999);
  if (to.getDay() !== 0) {
    to.setDate(to.getDate() + (7 - to.getDay()));
  }

  result = await db.query("weewx", "SELECT SUM(sum) FROM archive_day_rain WHERE dateTime BETWEEN ? AND ?", [from.getTime() / 1000, to.getTime() / 1000]);
  data.week = result[0]["SUM(sum)"];

  from.setDate(from.getDate() - 7);
  to.setDate(to.getDate() - 7);

  result = await db.query("weewx", "SELECT SUM(sum) FROM archive_day_rain WHERE dateTime BETWEEN ? AND ?", [from.getTime() / 1000, to.getTime() / 1000]);
  data.weekBefore = result[0]["SUM(sum)"];

  from = new Date(new Date().getFullYear(), new Date().getMonth());
  to = new Date(new Date().getFullYear(), new Date().getMonth() + 1);
  to = new Date(to.getTime() - 1000);

  result = await db.query("weewx", "SELECT SUM(sum) FROM archive_day_rain WHERE dateTime BETWEEN ? AND ?", [from.getTime() / 1000, to.getTime() / 1000]);
  data.month = result[0]["SUM(sum)"];

  
  from = new Date(new Date().getFullYear(), new Date().getMonth() - 1);
  to = new Date(new Date().getFullYear(), new Date().getMonth());
  to = new Date(to.getTime() - 1000);

  result = await db.query("weewx", "SELECT SUM(sum) FROM archive_day_rain WHERE dateTime BETWEEN ? AND ?", [from.getTime() / 1000, to.getTime() / 1000]);
  data.monthBefore = result[0]["SUM(sum)"];

  if (convertFn) {
    data.day = convertFn(data.day, digits);
    data.week = convertFn(data.week, digits);
    data.weekBefore = convertFn(data.weekBefore, digits);
    data.month = convertFn(data.month, digits);
    data.monthBefore = convertFn(data.monthBefore, digits);
  } else {
    data.day = utils.round(data.day, digits);
    data.week = utils.round(data.week, digits);
    data.weekBefore = utils.round(data.weekBefore, digits);
    data.month = utils.round(data.month, digits);
    data.monthBefore = utils.round(data.monthBefore, digits);
  }

  data.last = utils.formatTime(new Date(Number(data.last) * 1000));

  return data;
}

function calcSunriseSet(lat: number, lon: number, dayoffset: number): { sunrise: number; sunset: number } {
  const date = new Date();
  date.setDate(date.getDate() + dayoffset);
  const times = suncalc.getSunTimes(date, lat, lon);
  const sunrise = times.sunriseEnd.value.getTime();
  const sunset = times.sunsetStart.value.getTime();
  return { sunrise: sunrise, sunset: sunset };
}

function getSunriseSet(lat: number, lon: number, dayoffset: number): { sunrise: string; sunset: string } {
  const times = calcSunriseSet(lat, lon, dayoffset);
  const sunrise = utils.formatTime(new Date(times.sunrise));
  const sunset = utils.formatTime(new Date(times.sunset));
  return { sunrise: sunrise, sunset: sunset };
}

function getDayLength(lat: number, lon: number, dayoffset: number): number {
  const times = calcSunriseSet(lat, lon, dayoffset);
  return times.sunset - times.sunrise;
}
---

<Layout
  title="Sensoren | Wetter Naarn"
  description="Entdecke das Wetter in Naarn mit genauen Messungen für jeden Sensor, inklusive der aktuellen, minimalen und maximalen Temperatur des Tages. Weitere Daten zu Sonne und Mond sind ebenfalls verfügbar."
  keywords="Wetter, Naarn im Machlande, Aktuelle Wetterwerte, Sensoren, aktuell, minimal, maximal, Temperatur, Taupunkt, Luftfeuchte, Luftdruck, Wind, Regen, Sonnen, Mond"
  ogTitle="Wetter Naarn | Sensoren"
  ogDescription="Aktuelle Sensoren sowie die Höchst- und Tiefstwerte des Wetters in Naarn im Machlande."
  ogImage="https://wetter-naarn.at/assets/icons/logo/og-image.png"
  ogUrl="https://wetter-naarn.at/sensoren"
>
  <div id="content">
    <section>
      <h2>Temperatur</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidget name="Aktuell" text=`Ø ${data.outTemp.avg}°` value=`${data.outTemp.current}°` icon="/assets/icons/meteocons/static/sensors/thermometer/thermometer.svg" iconAlt="Temperatur Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Min" value=`${data.outTemp.min}°` text={data.outTemp.minTime} icon="/assets/icons/meteocons/static/sensors/thermometer/thermometer-colder.svg" iconAlt="Temperatur Min Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Max" value=`${data.outTemp.max}°` text={data.outTemp.maxTime} icon="/assets/icons/meteocons/static/sensors/thermometer/thermometer-warmer.svg" iconAlt="Temperatur Max Icon" />
        </div>
      </div>
    </section>

    <section>
      <h2>Gefühlte Temperatur</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidget name="Aktuell" text=`Ø ${data.appTemp.avg}°` value=`${data.appTemp.current}°` icon="/assets/icons/meteocons/static/sensors/thermometer-feelslike/thermometer.svg" iconAlt="Gefühlte Temperatur Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Min" value=`${data.appTemp.min}°` text={data.appTemp.minTime} icon="/assets/icons/meteocons/static/sensors/thermometer-feelslike/thermometer-colder.svg" iconAlt="Gefühlte Temperatur Min Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Max" value=`${data.appTemp.max}°` text={data.appTemp.maxTime} icon="/assets/icons/meteocons/static/sensors/thermometer-feelslike/thermometer-warmer.svg" iconAlt="Gefühlte Temperatur Max Icon" />
        </div>
      </div>
    </section>

    <section>
      <h2>Taupunkt</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidget name="Aktuell" text=`Ø ${data.dewpoint.avg}°` value=`${data.dewpoint.current}°` icon="/assets/icons/meteocons/static/sensors/thermometer-dewpoint/thermometer.svg" iconAlt="Taupunkt Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Min" value=`${data.dewpoint.min}°` text={data.dewpoint.minTime} icon="/assets/icons/meteocons/static/sensors/thermometer-dewpoint/thermometer-colder.svg" iconAlt="Taupunkt Min Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Max" value=`${data.dewpoint.max}°` text={data.dewpoint.maxTime} icon="/assets/icons/meteocons/static/sensors/thermometer-dewpoint/thermometer-warmer.svg" iconAlt="Taupunkt Max Icon" />
        </div>
      </div>
    </section>

    <section>
      <h2>Luftfeuchte</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidget name="Aktuell" text=`Ø ${data.outHumidity.avg}%` value=`${data.outHumidity.current}%` icon="/assets/icons/meteocons/static/sensors/humidity/humidity.svg" iconAlt="Luftfeuchte Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Min" value=`${data.outHumidity.min}%` text={data.outHumidity.minTime} icon="/assets/icons/meteocons/static/sensors/humidity/humidity-min.svg" iconAlt="Luftfeuchte Min Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Max" value=`${data.outHumidity.max}%` text={data.outHumidity.maxTime} icon="/assets/icons/meteocons/static/sensors/humidity/humidity-max.svg" iconAlt="Luftfeuchte Max Icon" />
        </div>
      </div>
    </section>

    <section>
      <h2>Luftdruck</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidgetBarometer name="Aktuell" text=`Ø ${data.barometer.avg}hPa` value=`${data.barometer.current}hPa` rotation={data.barometerRotation} />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Min" value=`${data.barometer.min}hPa` text={data.barometer.minTime} icon="/assets/icons/meteocons/static/sensors/barometer/barometer-min.svg" iconAlt="Luftdruck Min Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Max" value=`${data.barometer.max}hPa` text={data.barometer.maxTime} icon="/assets/icons/meteocons/static/sensors/barometer/barometer-max.svg" iconAlt="Luftdruck Max Icon" />
        </div>
      </div>
    </section>

    <section>
      <h2>Wind</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidgetWind name="Aktuell" text=`${data.wind.current}km/h` value=`Ø ${data.wind.avg}km/h` rotation={data.wind.currentDir} />
        </div>

        <div class="sensor">
          <DetailSensorWidgetWind name="Max" value=`${data.wind.max}km/h` text={data.wind.maxTime} rotation={data.wind.maxDir} />
        </div>

        <div class="sensor">
          <DetailSensorWidgetWind name="Böen Max" value=`${data.wind.maxGust}km/h` text={data.wind.maxGustTime} rotation={data.wind.maxGustDir} />
        </div>
      </div>
    </section>

    <section>
      <h2>Regen</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidget name="Heute" value=`${data.rain.day}mm²` text={`Letzter Regen:​ ${data.rain.last}`} icon="/assets/icons/meteocons/static/sensors/rain/rain-day.svg" iconAlt="Regen Tag Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Woche" value=`${data.rain.week}mm²` text={`Vorwoche:​ ${data.rain.weekBefore}mm²`} icon="/assets/icons/meteocons/static/sensors/rain/rain-week.svg" iconAlt="Regen Woche Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Monat" value=`${data.rain.month}mm²` text={`Vormonat:​ ${data.rain.monthBefore}mm²`} icon="/assets/icons/meteocons/static/sensors/rain/rain-month.svg" iconAlt="Regen Monat Icon" />
        </div>
      </div>
    </section>

    <section>
      <h2>Sonne</h2>
      <div class="row">
        <div class="sensor">
          <SunWidget name="Heute" sunriseIcon="/assets/icons/meteocons/static/sun/sunrise.svg" sunriseIconAlt="Sonnenaufgang Icon" sunriseTime={data.suntoday.sunrise} sunsetIcon="/assets/icons/meteocons/static/sun/sunset.svg" sunsetIconAlt="Sonnenuntergang Icon" sunsetTime={data.suntoday.sunset} />
        </div>
        <div class="sensor">
          <SunWidget
            name="Morgen"
            sunriseIcon="/assets/icons/meteocons/static/sun/sunrise.svg"
            sunriseIconAlt="Sonnenaufgang Icon"
            sunriseTime={data.suntomorrow.sunrise}
            sunsetIcon="/assets/icons/meteocons/static/sun/sunset.svg"
            sunsetIconAlt="Sonnenuntergang Icon"
            sunsetTime={data.suntomorrow.sunset}
          />
        </div>
        <div class="sensor">
          <DetailSensorWidget name="Tageslänge" value={data.daylength} text={data.daylengthdiff} icon="/assets/icons/meteocons/static/conditions/09d.svg" iconAlt="Tageslänge Icon" />
        </div>
      </div>
    </section>

    <section>
      <h2>Mond</h2>
      <div class="row">
        <div class="sensor">
          <DetailSensorWidget name="Aktuell" value={data.moon.illumination + "%"} text={data.moon.text} icon={data.moon.icon} iconAlt="Mondphase Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Nächster Vollmond" value={data.moon.nextFullMoon} text={data.moon.nextFullMoonText} icon="/assets/icons/meteocons/static/moon/moon-full.svg" iconAlt="Vollmond Icon" />
        </div>

        <div class="sensor">
          <DetailSensorWidget name="Nächster Neumond" value={data.moon.nextNewMoon} text={data.moon.nextNewMoonText} icon="/assets/icons/meteocons/static/moon/moon-new.svg" iconAlt="Neumond Icon" />
        </div>
      </div>
    </section>
  </div>
</Layout>

<style lang="scss">
  #content {
    padding: 0.5em 2em 1.2em 2em;
    min-height: 100vh;
    box-sizing: border-box;
    @media (max-width: 1250px) {
      margin-left: 0;
      margin-top: 3.75em;
    }
    @media (max-width: 420px) {
      padding: 0.5em 1em 1.2em 1em;
    }
    .widget {
      padding: 1.5em;
      border-radius: 1em;
    }
    h2 {
      font-size: 2em;
      font-weight: 500;
      margin-bottom: 0.2em;
    }
    section {
      margin-bottom: 1em;
    }
    .row {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      @media (max-width: 950px) {
        flex-direction: column;
      }
      .sensor {
        border-radius: 1em;
        flex: 1;
        margin-right: 1.5em;
        @media (max-width: 950px) {
          margin-bottom: 1.5em;
          width: 100%;
        }
      }
      .sensor:last-child {
        margin-right: 0;
      }
    }
  }
</style>
